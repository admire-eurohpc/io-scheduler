#!/bin/bash
################################################################################
# Copyright 2022-2023, Inria, France.                                          #
# Copyright 2023, Barcelona Supercomputing Center (BSC), Spain.                #
# All rights reserved.                                                         #
#                                                                              #
# This software was partially supported by the EuroHPC-funded project ADMIRE   #
#   (Project ID: 956748, https://www.admire-eurohpc.eu).                       #
#                                                                              #
# This file is part of scord.                                                  #
#                                                                              #
# scord is free software: you can redistribute it and/or modify                #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# scord is distributed in the hope that it will be useful,                     #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with scord.  If not, see <https://www.gnu.org/licenses/>.              #
#                                                                              #
# SPDX-License-Identifier: GPL-3.0-or-later                                    #
################################################################################

source @CMAKE_INSTALL_FULL_DATADIR@/@PROJECT_NAME@/slurm/scord_common.sh

# determine the temporary directory to use for the epilog logs
if [[ -n "$TMPDIR" ]]; then
  EPILOG_TMPDIR="$TMPDIR"
else
  EPILOG_TMPDIR="/tmp"
fi

# redirect stdout and stderr to a log file in $EPILOG_TMPDIR
exec &>"$EPILOG_TMPDIR/scord_epilog.$SLURM_JOB_ID.log"
# print out all commands
set -x
# print out the value of all variables
env

# if no ADMIRE CLI options were specified, we don't need to do anything
if ! compgen -v SPANK__SLURM_SPANK_OPTION_admire_cli_; then
  echo "SCORD SLURM plugin not requested. Exiting."
  exit 0
fi

# find out some information about the job and where we are running
HOSTNAME=$(hostname -s)
declare -a hostnames
get_nodelist hostnames "$SLURM_NODELIST"

# create a temporary directory for the job and redirect both stdout and stderr
# to a log file within it
WORKDIR="$EPILOG_TMPDIR/$SLURM_JOB_USER/$SLURM_JOB_ID"
if [ ! -d "$WORKDIR" ]; then
  run_as "$SLURM_JOB_USER" mkdir -p "$WORKDIR"
fi

# now that we have a specific working directory, move the previous log file
# into $WORKDIR so that we have all messages in one place (since the file is
# still open by the shell, the move operation will not affect where the
# messages are written)
mv "$EPILOG_TMPDIR/scord_epilog.$SLURM_JOB_ID.log" "$WORKDIR/scord_epilog.log"

if ((${#hostnames[@]} == 0)); then
  echo "No hostnames found for job $SLURM_JOB_ID. Weird."
  exit 0
fi

# only run on the first node of the allocation (scord-ctl will always be
# started on the first node of the allocation)
if [[ "$HOSTNAME" != "${hostnames[0]}" ]]; then
  exit 0
fi

echo "Shutting down adhoc controller for job $SLURM_JOB_ID (user: $SLURM_JOB_USER)"
PIDFILE="$EPILOG_TMPDIR/$SLURM_JOB_USER/$SLURM_JOB_ID/scord-ctl.pid"
if [[ -f "$PIDFILE" ]]; then
  kill -TERM "$(<"$PIDFILE")"
fi

# find out the IP address of the first node of the allocation
declare -a addrs
if ! get_addrs addrs "$HOSTNAME" v4; then
  echo "Error searching IP addresses for $HOSTNAME."
  exit 1
fi

if ((${#addrs[@]} == 0)); then
  echo "No addresses found."
  exit 1
fi

if [[ -z $SLURM_JOB_ID || -z $SLURM_JOB_UID ]]; then
  echo "Missing required environment variables" >&2
  exit 1
fi

# shellcheck disable=SC2016
USER_HOME=$(run_as "$SLURM_JOB_USER" echo '$HOME')
CONFIG_DIRECTORY="${XDG_CONFIG_HOME:-$USER_HOME/.config}/cargo"

CARGO_ID=$(echo "cargo_$SLURM_JOB_ID.$SLURM_JOB_UID" | sha256sum | awk '{ print $1 }')
CARGO_CONFIG_FILE=$CONFIG_DIRECTORY/$CARGO_ID.cfg
CARGO_SERVICE_NAME=$(systemd-escape --template cargo@.service "$CARGO_ID")

echo "Shutting down Cargo data stager for job $SLURM_JOB_ID (user: $SLURM_JOB_USER)"
CUID=$(id -u $SLURM_JOB_USER)
if ! run_as "$SLURM_JOB_USER" DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$CUID/bus systemctl --user stop "$CARGO_SERVICE_NAME"; then
  exit 1
fi

if [[ -e "$CARGO_CONFIG_FILE" ]]; then
  rm "$CARGO_CONFIG_FILE"
fi
